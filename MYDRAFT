import pandas as pd
import eikon as ek
import time
import json
from IPython.display import HTML

# Set your Eikon API key
ek.set_app_key("your_api_key_here")

# Load the CSV file into a DataFrame
file_path = "FixnewsWithStory.csv"  # Replace with your actual file path
data = pd.read_csv(file_path)

# Ensure 'storyId' column exists
if 'storyId' not in data.columns:
    raise ValueError("The CSV file does not contain a 'storyId' column.")

# Load cached stories if available
try:
    with open("fetched_stories.json", "r", encoding="utf-8") as f:
        fetched_stories = json.load(f)
except FileNotFoundError:
    fetched_stories = {}

# Function to fetch and render story in HTML
def fetch_story_html(story_id):
    try:
        if story_id in fetched_stories:
            print(f"Story {story_id} already cached.")
            return fetched_stories[story_id]
        else:
            # Fetch the story content using Eikon API
            story_html = ek.get_news_story(story_id)
            fetched_stories[story_id] = story_html  # Cache the result
            return story_html
    except Exception as e:
        return f"Error fetching story for {story_id}: {e}"

# Iterate over all story IDs in batches
html_contents = []
batch_size = 10  # Process 10 story IDs at a time
for i in range(0, len(data), batch_size):
    batch = data['storyId'][i:i+batch_size]
    for story_id in batch:
        html_content = fetch_story_html(story_id)
        html_contents.append(html_content)
        time.sleep(1)  # Pause for 1 second between requests
    print(f"Processed batch {i // batch_size + 1}. Waiting before next batch...")
    time.sleep(60)  # Pause for 60 seconds between batches

# Save fetched stories to a JSON file for future use
with open("fetched_stories.json", "w", encoding="utf-8") as f:
    json.dump(fetched_stories, f)

# Render the stories in HTML (in Jupyter Notebook)
full_html = "<br><hr><br>".join(html_contents)  # Combine all stories with separators
HTML(full_html)



import pandas as pd
import json

# Load the cached stories from the JSON file
try:
    with open("fetched_stories.json", "r", encoding="utf-8") as f:
        fetched_stories = json.load(f)
except FileNotFoundError:
    raise FileNotFoundError("The 'fetched_stories.json' file does not exist. Run the previous code to generate it.")

# Convert the fetched stories dictionary to a DataFrame
data_to_export = pd.DataFrame(list(fetched_stories.items()), columns=['storyId', 'htmlContent'])

# Save the DataFrame to a new CSV file
output_csv_path = "FetchedStoriesWithHTML.csv"
data_to_export.to_csv(output_csv_path, index=False, encoding="utf-8")

print(f"Exported HTML content to {output_csv_path}")
